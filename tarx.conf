;Encrypted file transfer server - wrap network tar in TLS with stunnel, launched
;from inetd. Place a statically-linked tar binary in /home/tarjail/sbin - the
;busybox version works well, but compiling a tar with -static is likely safer.
;Access control is set with the verify=3/CAfile options - remove these and
;control with tcpd/hosts.deny for simpler address filtering if safety can be
;relaxed. The example illustrates the receiving server on port 5000, and the
;sending server on port 5001. Do not enable any compression options on tar, due
;to the CRIME attack on TLS. Example inetd entry:
;tarx stream tcp wait nobody /bin/stunnel stunnel /etc/stunnel/tarx.conf

sslVersion	=	TLSv1.2
TIMEOUTidle	=	60 ; without -no_ign_eof enforced timeout on receive
	options	=	NO_SSLv3
	options	=	NO_SSLv2
	options	=	SINGLE_DH_USE
	options	=	SINGLE_ECDH_USE
	options	=	CIPHER_SERVER_PREFERENCE
	curve	=	secp521r1 ; --curve unsupported for www; use: secp384r1
	cert	=	/path/to/your/private_key.pem
	FIPS	=	no
	debug	=	7
	syslog	=	yes
	chroot	=	/home/tarjail
	setuid	=	nobody
	setgid	=	nobody
	CAfile	=	/path/to/client/cert.pem
	verify	=	3

;best ciphers https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
ciphers=ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS

;*Server receiver:
	exec	=	/sbin/tar
execargs	=	/sbin/tar x -f - -C /files
; Client send:
; tar cf - files... | openssl s_client -connect host.com:5000 -quiet
; -no_ign_eof will close immedately, but cause RENEGOTIATING for ^[QR] lines

;*Server sender:
;	exec	=	/sbin/tar
;execargs	=	/sbin/tar c -f - -C /files .
; Client receive:
; openssl s_client -connect host.com:5001 -quiet | tar tvf -

;*SELINUX allow tar execution:
;chcon -v --type=inetd_child_exec_t tar

;*DO NOT USE tar COMPRESSION OPTIONS*
